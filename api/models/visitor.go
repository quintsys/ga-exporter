// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Visitor visitor
//
// swagger:model visitor
type Visitor struct {

	// client Id
	// Required: true
	// Max Length: 36
	// Min Length: 1
	ClientID *string `json:"clientId"`

	// ad content
	// Max Length: 255
	// Min Length: 0
	AdContent *string `json:"adContent,omitempty"`

	// ad group
	// Max Length: 255
	// Min Length: 0
	AdGroup *string `json:"adGroup,omitempty"`

	// ad matched query
	// Max Length: 255
	// Min Length: 0
	AdMatchedQuery *string `json:"adMatchedQuery,omitempty"`

	// campaign
	// Max Length: 100
	// Min Length: 0
	Campaign *string `json:"campaign,omitempty"`

	// keyword
	// Max Length: 255
	// Min Length: 0
	Keyword *string `json:"keyword,omitempty"`

	// medium
	// Max Length: 50
	// Min Length: 0
	Medium *string `json:"medium,omitempty"`

	// source
	// Max Length: 50
	// Min Length: 0
	Source *string `json:"source,omitempty"`
}

// Validate validates this visitor
func (m *Visitor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdMatchedQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedium(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Visitor) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("clientId", "body", m.ClientID); err != nil {
		return err
	}

	if err := validate.MinLength("clientId", "body", *m.ClientID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("clientId", "body", *m.ClientID, 36); err != nil {
		return err
	}

	return nil
}

func (m *Visitor) validateAdContent(formats strfmt.Registry) error {
	if swag.IsZero(m.AdContent) { // not required
		return nil
	}

	if err := validate.MinLength("adContent", "body", *m.AdContent, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("adContent", "body", *m.AdContent, 255); err != nil {
		return err
	}

	return nil
}

func (m *Visitor) validateAdGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.AdGroup) { // not required
		return nil
	}

	if err := validate.MinLength("adGroup", "body", *m.AdGroup, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("adGroup", "body", *m.AdGroup, 255); err != nil {
		return err
	}

	return nil
}

func (m *Visitor) validateAdMatchedQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.AdMatchedQuery) { // not required
		return nil
	}

	if err := validate.MinLength("adMatchedQuery", "body", *m.AdMatchedQuery, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("adMatchedQuery", "body", *m.AdMatchedQuery, 255); err != nil {
		return err
	}

	return nil
}

func (m *Visitor) validateCampaign(formats strfmt.Registry) error {
	if swag.IsZero(m.Campaign) { // not required
		return nil
	}

	if err := validate.MinLength("campaign", "body", *m.Campaign, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("campaign", "body", *m.Campaign, 100); err != nil {
		return err
	}

	return nil
}

func (m *Visitor) validateKeyword(formats strfmt.Registry) error {
	if swag.IsZero(m.Keyword) { // not required
		return nil
	}

	if err := validate.MinLength("keyword", "body", *m.Keyword, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("keyword", "body", *m.Keyword, 255); err != nil {
		return err
	}

	return nil
}

func (m *Visitor) validateMedium(formats strfmt.Registry) error {
	if swag.IsZero(m.Medium) { // not required
		return nil
	}

	if err := validate.MinLength("medium", "body", *m.Medium, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("medium", "body", *m.Medium, 50); err != nil {
		return err
	}

	return nil
}

func (m *Visitor) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := validate.MinLength("source", "body", *m.Source, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("source", "body", *m.Source, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this visitor based on context it is used
func (m *Visitor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Visitor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Visitor) UnmarshalBinary(b []byte) error {
	var res Visitor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
